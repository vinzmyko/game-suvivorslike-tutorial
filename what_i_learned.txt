2:
- Can ctrl + drag so increase values in increments of 1 pixel.
3:
- Nodes furthers down the tree's ready() function is called first. ie. Bottom to top ready functions are called first
4:
- Node draw order is the opposite meaning nodes higher up are drawn first. ie. Nodes near the bottom are above everything
5:
- Ctrl + Shift + O = Quick open scene
7:
Ctrl + Shift + A = Quick add scene to current scene
11:
-used functions are an arugument to a function.
	Array's filter(method) function which goes through each element in the array and does an operation on it which in set
	inside the function parameters. If it returns true then it doesn't get filtered out.
	eg. enemies = enemies.filter(func(enemy: Node2D):
		return enemy.global_position.distance_squared_to(player.global_position) < pow(MAX_RANGE, 2)
	)
	NOTE YOU GOT TO WE HAVE TO REASSIGN ENEMIES SO IT ACTUALLY UPDATES AND WE CAN USE IT
	Goes through each enemy in the enemies array and checks if it is within the MAX_RANGE, if it's not in the MAX_RANGE
	then it get filtered out. After the filter function gets run, the enemies array will only have enemies that are
	within the range.
	
	Array's sort_custom(func) function. This sorts the array using a function. The function should have 2 arguments
	which are the elements in the array. The function must return either true or false. If it returns true then
	element b will be sorted after element a.
	eg. 	enemies.sort_custom(func(a:Node2D, b:Node2D):
		var a_distance = a.global_position.distance_squared_to(player.global_position)
		var b_distance = b.global_position.distance_squared_to(player.global_position)
		return a_distance < b_distance
	)
	This function basically sorts the enemies from closest to farthest with index 0 being the closest. Calculates the
	distance from the player and element a and does the same with with element b. Then it checks to see if element a
	is less than element b if it's true then element b will go after element a meaning that the furthest element will
	go up in the index.
12:
- Project settings -> Rendering -> Snap 2D transforms into pixel
This one is good as all the pixel positions are a float value like Vector2(5.7, -10.3) but this setting makes it only
use ints so it will make the game look smoother. If you are using lerp for acceleration turn it off as lerping goes
through floating point values but they snap to the nearest integer which makes it jittery
15:
- GDScript: if you want a quick way to rename a word you can highlight it and the press Ctrl + D and it will highlight
another one, you can spam press this to highlight all the same names and then you can change them all at once!
- Cool way to format strings: You can use change how much 0's show up in the formatted string.
eg. return str(minutes) + ":" + ("%02d" % floor(remaining_seconds)) this on makes the remaining seconds have a 0
at the start so it won't show up at 8 but 08.
16:
- Collision Mask is the one that does the code so when you are choosing which one to highlight mask or layer, which ever
object that you are going to be writing the logic to put it into the mask layer as this is the one where you connect
the signal to and write the code to.
18:
- If you are trying to queue_free() somethiing that is handling collisions it will give you an error, the way to fix it
goes as follows, you need to deffer the call, 
eg. Callable(check_death).call_deferred()
This only calls the function after it does all the necessary calculations
19:
- How this guy abstracts components is he has a scene for the actual ability and then he has a hurtbox component on all
abilities. He then has a controller object that manages the spawning of the ability on where.
- Before he put all the functionality of taking damage from the basic_enemy main node to the HurtboxComponent which
handles all the damage done. Via on_area_entered signal. The HealthComponent is the one that deals with the damage to
the object.
-In the sword ability it only contains a referrence to the HitboxComponent which does all the logic which is actually
nothing as of right now as all it needs to do it spawn the HitboxArea2D on the enemy and that does everything as the
sword controller handles the damage
-On margin containers remember to go to Mouse -> Filter -> Ignore. REMEMBER ALL CONTROL NODES HAS A MOUSE FILTER SETTING
22:
-He has logic for certain things in each node and he gets a referrence to that node via @export var node: Node and then
the calls the functions from that node on the manager/handler script
- When you want to pause the game use get_tree().pause = true, but you need to go to the setting
Node -> Process -> Mode -> Always
23:
-.connect(function_name.bind()) able to bind parameters when the callable doesn't have any
-How the level up workflow goes:
	Collect vials emits a signal -> ExperienceManager listens to it and handles current exp calcs to level up
	-> When you have enough exp to level up -> emits level up signal -> UpgradeManager listens to it
	-> Picks from random ability in the ability pool -> instance upgrade screen pop up -> calls upgrade_scene's method
	which takes an array of upgrades and instances new cards on the screen -> also connects to an input selected signal
	on the upgrade_screen -> which applies upgrade on click
- Use of GameEvents singleton (global signal bus) is to push variables to the very top of the scenetree and then push them
back down to other handlers. eg.
	func emit_ability_upgrades_added(upgrade: AbilityUpgrade, current_upgrades: Dictionary):
		ability_upgrades_added.emit(upgrade, current_upgrades)
we can emit this when a new upgrade is added and then connect to this on the script that we want to handle it, remember
defensive coding and use if upgrade != "sword_rate": [resource id name]
							return
25:
- Use of Node2D -> CanvasLayer -> Ordering ->Y Sort Enabled
When you want to spawn objects on a certain node which will hold them ie such as Foreground nodes that you want to appear
at the front, you can use groups and put _layer at the end so you know it's only got 1 node attached to it.
What I would normally do is $../../../Foreground.add_child. This is bad because if the scene tree changes you are fucked
so why not use var foreground_layer = get_tree().get_first_node_in_group("foreground_layer")
foreground_layer.add_child()
32:
- Uses a vector as a physics direction vector not as a positional vector. I didn't normally see vectors used in this case
He uses Vector2.Right.rotated() Uses TAU a lot inside as rotated paramaters
34:
- He uses duck typing a lot when he wants to defensively code his project
35:
- Can copy properies of a .tres file on the spade/spanner icon amd paste them there as well. Useful when inspector is
bugging out and not showing other variables can just copy and then reset script and then put it back and paste
36:
-If you want to flip a spirte you can parent a Node2D and just apply a negative scale on the parent, if you were to do
this on the actual sprite then it would overwrite the animation
-sign() function good if you want to tell if a number is negative, positive or zero. sign(-6) returns -1
38:
-Used a particle as an on death animation
39:
-When you drag a node to script if you press Ctrl after you drag and before you release you will type the whole 
variable initialisation
42:
-Remember when you want to tween something you can use the lerp function when you need to move a position to a 
different vector. You dont' need to 1 - exp(-get_process_delta_time()), only where you don't want better comp frame rate to effect animation
-If you want to delete a node after it has completed a tween do tween.tween_callback(queue_free) which will
call the method queue_free() after the tween has finished
-use https://easings.net/en to look at different easing functions to use on a tween
-to use easing properly you need to call 2 functions which is set_ease() and set_trans() the ease will be the entry transition
and the trans will be the exit trasition
-if code line is too long you can you \ to make it different lines. eg.
	tween.tween_method(tween_collect.bind(global_position), 0.0, 1.0, 1).set_ease(Tween.EASE_IN).set_trans(Tween.TRANS_BACK)
		tween.tween_method(tween_collect.bind(global_position), 0.0, 1.0, 1)\
		.set_ease(Tween.EASE_IN)\
		.set_trans(Tween.TRANS_BACK)
-can't modify anything about collision in a "on_area_connected"/"on_body_connected" to get around this you can use the funcation
Callable() which takes in a function. You do this so you can put a .call_deferred() at the end so it will call itself during the 
next idle frame. eg. Callable(disable_collision).call_deferred()
-If you want to use a lot of tweens like tweening the lerp of the vial and tweening the scale of the sprite of the vial and using
tween_callback()'s you need to use tween.set_parallel() at the start this will run all the tweens at once, to add furthur tweaks and have more
control over the tweens you can use 
.set_delay at the end of the tween so it will only run after the delay has passed
tween.chain() in a new line, tween calls bellow will run after tweens above do
44:
When he creates new components he just creates functions that you will call on the main script. eg.
When he is making the floating text scene he creates a function that takes in a string to be displayed, he then referrences the floating text scene
and then calls the start function on the hurtbox_component and passes in the damage
45:
-A referrence of a resource is shared between all the scenes that use it, when you change one instance of the resource it will be reflected all across
other instances. You can do this by ShaderMaterial -> Resource -> Local to Scene
46:
- Format strings are cool when you want to control how many decimals a number has. eg.
	var format_string = "%0.1f"
	if round(hitbox_component.damage) == hitbox_component.damage:
		format_string = "%0.0f"
	floating_text_instance.start(format_string % hitbox_component.damage)
	to format a string you need to use %. here I set up a format_string variable with a 1 d.p but i set it to 0 d.p when needed
47:
-Use MarginContainers as a margin buffer xd
49:
-await keyword means stop executing of this function until code ahead of it finishes
						await animation_player.animation_finished
- create a one off timer via await get_tree().create_timer(delay).timout
-AnimationPlayer's can only play one animation at a time, to get around this create a new AnimationPlayer 3Head
-Sometimes on the on_mouse_entered signal it will play multiple times, this is due to other Control nodes activating it, to stop this Shfit + Click 
all the Control Nodes and then change Mouse -> Filter -> Ignore
